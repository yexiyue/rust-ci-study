name: CI
on:
  push:
    branches:
      - "master"
    tags:
      - v*
  workflow_dispatch: {}
env:
  APP_NAME: parse-json
jobs:
  # build:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       build: [linux, windows, macos]
  #       include:
  #         - build: linux
  #           os: ubuntu-latest
  #           target: x86_64-unknown-linux-musl
  #           archive-name: parse-json-linux.tar.gz
  #         - build: macos
  #           os: macos-latest
  #           target: x86_64-apple-darwin
  #           archive-name: parse-json-macos.tar.gz
  #         - build: windows
  #           os: windows-latest
  #           target: x86_64-pc-windows-msvc
  #           archive-name: parse-json-windows.7z
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #         target: ${{ matrix.target }}
  #     - name: Build Binary
  #       run: cargo build --release --target ${{ matrix.target }}
  #     - name: Build archive
  #       shell: bash
  #       run: |
  #         mkdir archive
  #         cd archive
  #         if [ "${{ matrix.build }}" = "windows" ]; then
  #           cp "../target/${{ matrix.target }}/release/${{ env.APP_NAME }}.exe" ./
  #           7z a "${{ matrix.archive-name }}" ${{ env.APP_NAME }}.exe
  #         else
  #           cp "../target/${{ matrix.target }}/release/${{ env.APP_NAME }}" ./
  #           tar -czf "${{ matrix.archive-name }}" ${{ env.APP_NAME }}
  #         fi
  #     - name: Upload archive
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.archive-name }}
  #         path: archive/${{ matrix.archive-name }}
  release:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      # - uses: actions/download-artifact@v4
      # - name: Display structure of downloaded files
      #   run: ls
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            // const { name, tag_name: version } = context.payload.release
            console.log("context",context);
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: `${process.env.APP_NAME}`,
              tag_name: `v0.1.5`,
              body: "Release created by CI",
              draft: false,
              prerelease: false,
            });
            console.log(data);


  # publish:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - name: publish
  #       run: cargo publish --token ${{ secrets.CRATE_TOKEN }}
  
      
